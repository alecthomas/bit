// Code generated by "enumer -type=Override -linecomment"; DO NOT EDIT.

package parser

import (
	"fmt"
	"strings"
)

const _OverrideName = "replaceprependappenddelete"

var _OverrideIndex = [...]uint8{0, 7, 14, 20, 26}

const _OverrideLowerName = "replaceprependappenddelete"

func (i Override) String() string {
	if i < 0 || i >= Override(len(_OverrideIndex)-1) {
		return fmt.Sprintf("Override(%d)", i)
	}
	return _OverrideName[_OverrideIndex[i]:_OverrideIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OverrideNoOp() {
	var x [1]struct{}
	_ = x[OverrideReplace-(0)]
	_ = x[OverridePrepend-(1)]
	_ = x[OverrideAppend-(2)]
	_ = x[OverrideDelete-(3)]
}

var _OverrideValues = []Override{OverrideReplace, OverridePrepend, OverrideAppend, OverrideDelete}

var _OverrideNameToValueMap = map[string]Override{
	_OverrideName[0:7]:        OverrideReplace,
	_OverrideLowerName[0:7]:   OverrideReplace,
	_OverrideName[7:14]:       OverridePrepend,
	_OverrideLowerName[7:14]:  OverridePrepend,
	_OverrideName[14:20]:      OverrideAppend,
	_OverrideLowerName[14:20]: OverrideAppend,
	_OverrideName[20:26]:      OverrideDelete,
	_OverrideLowerName[20:26]: OverrideDelete,
}

var _OverrideNames = []string{
	_OverrideName[0:7],
	_OverrideName[7:14],
	_OverrideName[14:20],
	_OverrideName[20:26],
}

// OverrideString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OverrideString(s string) (Override, error) {
	if val, ok := _OverrideNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OverrideNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Override values", s)
}

// OverrideValues returns all values of the enum
func OverrideValues() []Override {
	return _OverrideValues
}

// OverrideStrings returns a slice of all String values of the enum
func OverrideStrings() []string {
	strs := make([]string, len(_OverrideNames))
	copy(strs, _OverrideNames)
	return strs
}

// IsAOverride returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Override) IsAOverride() bool {
	for _, v := range _OverrideValues {
		if i == v {
			return true
		}
	}
	return false
}
